export default function App() {
  const { mode, eff, cycle } = useTheme();
  const { key, cycle: cyclePal, pal } = usePalette();
  const colors = cur(eff, pal);

  // Game state
  const [xp, setXp] = useState(520);
  const [apps, setApps] = useState(48);
  const [weighted, setWeighted] = useState(46.5);
  const [gold, setGold] = useState(260);
  const [skillPoints, setSkillPoints] = useState(0);
  const [streak, setStreak] = useState(0);
  const [activeEffects, setActiveEffects] = useState([]);
  const [focus, setFocus] = useState(FOCUS_BASELINE);
  const [applications, setApplications] = useState([]);
  const [showForm, setShowForm] = useState(false);

  const { l, rem, need } = useMemo(() => lvl(xp), [xp]);
  const step = 25;
  const into = weighted % step;

  function gainXp(base, applyBuff = true) {
    const multiplier = applyBuff && activeEffects.some((e) => e.id === 1 || e.id === 3) ? 2 : 1;
    setXp((x) => x + base * multiplier);
  }

  function addApplication(fields) {
    const cost = focusCost(fields.type);
    if (focus < cost) {
      Alert.alert('Out of Focus', 'You are out of focus! Recharge to log more applications.');
      return false;
    }
    
    const id = Math.random().toString(36).slice(2, 9);
    const { xp: xpReward, gold: goldReward, qs, au } = computeRewards(fields, { effects: activeEffects });
    const app = { id, ...fields, qs };
    
    setApplications(list => [app, ...list]);
    setApps(a => a + 1);
    setWeighted(w => w + au);
    gainXp(xpReward, false);
    setGold(v => v + goldReward);
    setFocus(f => Math.max(0, f - cost));
    return true;
  }

  const quickActions = [
    {
      key: 'Log application',
      icon: 'flash',
      onPress: () => {
        if (focus < 0.25) {
          Alert.alert('Out of Focus', 'You are out of focus! Recharge to log more applications.');
        } else {
          setShowForm(true);
        }
      },
      hint: 'Open log form'
    },
    {
      key: 'Easy apply',
      icon: 'trending-up',
      onPress: () => {
        const now = new Date();
        addApplication({
          company: 'New Company',
          role: 'Easy Apply',
          country: '',
          city: '',
          type: 'Easy',
          status: 'Applied',
          date: now.toISOString(),
          note: '',
          cvTailored: false,
          motivation: false,
          favorite: false,
          platform: 'Company website'
        });
      },
      hint: 'Log easy apply'
    },
    {
      key: 'Networking',
      icon: 'people',
      onPress: () => setGold(g => g + 8),
      hint: 'Add networking'
    },
    {
      key: 'Skill',
      icon: 'school',
      onPress: () => {
        gainXp(14);
        setGold(g => g + 3);
      },
      hint: 'Add skill block'
    },
    {
      key: 'Interview',
      icon: 'chatbubbles',
      onPress: () => {
        gainXp(18);
        setGold(g => g + 4);
      },
      hint: 'Add interview prep'
    },
    {
      key: 'Prestige',
      icon: 'trophy',
      onPress: () => {},
      hint: 'Prestige (requires Level 100)',
      disabled: l < 100
    }
  ];

  const statusIcons = useMemo(
    () => ({
      Applied: { icon: 'document-text-outline', tint: colors.sky },
      Interview: { icon: 'chatbubble-ellipses-outline', tint: colors.emerald },
      Ghosted: { icon: 'skull-outline', tint: colors.rose },
      Rejected: { icon: 'close-circle-outline', tint: colors.rose }
    }),
    [colors]
  );

  const statusLookup = useMemo(() => {
    const map = {};
    STATUSES.forEach((status) => {
      map[status.key] = status;
    });
    return map;
  }, []);

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.bg }]}>
      <StatusBar barStyle={eff === 'light' ? 'dark-content' : 'light-content'} backgroundColor={colors.bg} />
      
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.headerLeft}>
          <IconButton
            onPress={cycle}
            icon={mode === 'light' ? 'sunny' : mode === 'dark' ? 'moon' : 'desktop'}
            colors={colors}
            theme={eff}
            accessibilityLabel="Cycle theme"
          />
          <TouchableOpacity
            onPress={cyclePal}
            style={[styles.paletteButton, { backgroundColor: colors.surface, borderColor: colors.surfaceBorder }]}
          >
            <Ionicons name="color-palette" size={20} color={colors.text} />
            <Text style={[styles.paletteText, { color: colors.text }]}>{pal.name}</Text>
          </TouchableOpacity>
        </View>
        
        <View style={styles.headerRight}>
          <StatBadge icon="school" count={skillPoints} colors={colors} theme={eff} />
          <StatBadge icon="flame" count={streak} colors={colors} theme={eff} />
          <GoldPill colors={colors}>{gold}</GoldPill>
        </View>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* Level Panel */}
        <Panel colors={colors}>
          <View style={styles.levelHeader}>
            <View style={styles.levelInfo}>
              <Ionicons name="medal" size={16} color={colors.sky} />
              <Text style={[styles.levelText, { color: colors.text }]}>Level {l}</Text>
            </View>
            <View style={styles.appsCount}>
              <Ionicons name="briefcase" size={16} color={colors.text} />
              <Text style={[styles.appsCountText, { color: colors.text }]}>{apps}</Text>
            </View>
          </View>
          
          <View style={styles.progressSection}>
            <View style={styles.progressHeader}>
              <View style={styles.progressLabel}>
                <Ionicons name="flash" size={14} color="rgba(148,163,184,.95)" />
                <Text style={styles.progressLabelText}>XP to next</Text>
              </View>
              <Text style={styles.progressValue}>{Math.floor(rem)} / {need}</Text>
            </View>
            <ProgressBar value={rem} max={need} fromColor={colors.rose} toColor={colors.amber} colors={colors} />
          </View>

          <View style={styles.progressSection}>
            <View style={styles.progressHeader}>
              <View style={styles.progressLabel}>
                <Ionicons name="bulb-outline" size={14} color="rgba(148,163,184,.95)" />
                <Text style={styles.progressLabelText}>Focus</Text>
              </View>
              <Text style={styles.progressValue}>{focus.toFixed(1)} / {FOCUS_BASELINE}</Text>
            </View>
            <ProgressBar value={focus} max={FOCUS_BASELINE} fromColor={colors.lilac} toColor={colors.sky} colors={colors} />
          </View>
        </Panel>

        {/* Milestone Panel */}
        <Panel colors={colors}>
          <View style={styles.progressHeader}>
            <View style={styles.progressLabel}>
              <Ionicons name="flag-outline" size={14} color="rgba(148,163,184,.95)" />
              <Text style={styles.progressLabelText}>Milestone</Text>
            </View>
            <Text style={styles.progressValue}>{into.toFixed(1)} / {step}</Text>
          </View>
          <ProgressBar value={into} max={step} fromColor={colors.sky} toColor={colors.emerald} colors={colors} />
        </Panel>

        {/* Quick Actions */}
        <View style={styles.quickActions}>
          {quickActions.map((action) => (
            <TouchableOpacity
              key={action.key}
              onPress={action.onPress}
              disabled={action.disabled}
              style={[styles.quickAction, { opacity: action.disabled ? 0.5 : 1 }]}
              accessibilityLabel={action.hint}
            >
              <Ionicons name={action.icon} size={20} color="rgba(148,163,184,.95)" />
              <Text style={styles.quickActionText}>{action.key}</Text>
            </TouchableOpacity>
          ))}
        </View>

        <Panel colors={colors}>
          <View style={styles.panelHeader}>
            <Text style={[styles.panelTitle, { color: colors.text }]}>Applications</Text>
            {applications.length > 0 && (
              <Text style={styles.panelSubtitle}>{applications.length} logged</Text>
            )}
          </View>

          {applications.length ? (
            applications.map((app, index) => {
              const extras = [
                { key: 'cv', icon: 'document-text-outline', active: app.cvTailored },
                { key: 'motivation', icon: 'mail-outline', active: app.motivation },
                { key: 'favorite', icon: 'star-outline', active: app.favorite }
              ];
              const statusInfo = statusIcons[app.status] || {};
              const status = statusLookup[app.status];
              const dateLabel = formatDateTime(app.date);
              const notePreview = truncate(app.note);

              return (
                <View
                  key={app.id}
                  style={[
                    styles.appCard,
                    {
                      backgroundColor: colors.surface,
                      borderColor: colors.surfaceBorder,
                      marginBottom: index === applications.length - 1 ? 0 : 12
                    }
                  ]}
                >
                  <View style={styles.appHeader}>
                    <View style={styles.appTitle}>
                      <Text style={[styles.appCompany, { color: colors.text }]}>{app.company}</Text>
                      <Text style={styles.appRole}>{app.role}</Text>
                      {notePreview ? <Text style={styles.appNote}>{notePreview}</Text> : null}
                    </View>
                    <View style={styles.appMeta}>
                      {dateLabel ? <Text style={styles.appMetaText}>{dateLabel}</Text> : null}
                    </View>
                  </View>

                  <View style={styles.appExtras}>
                    {extras.map((extra, extraIndex) => {
                      const marginStyle = { marginRight: extraIndex === extras.length - 1 ? 0 : 8 };
                      if (extra.active) {
                        return (
                          <LinearGradient
                            key={extra.key}
                            colors={[colors.sky, colors.emerald]}
                            start={{ x: 0, y: 0 }}
                            end={{ x: 1, y: 1 }}
                            style={[styles.appExtraIcon, marginStyle]}
                          >
                            <Ionicons name={extra.icon} size={14} color="#0f172a" />
                          </LinearGradient>
                        );
                      }
                      return (
                        <View
                          key={extra.key}
                          style={[
                            styles.appExtraIcon,
                            marginStyle,
                            {
                              backgroundColor: colors.chipBg,
                              borderColor: colors.surfaceBorder,
                              borderWidth: 1
                            }
                          ]}
                        >
                          <Ionicons name={extra.icon} size={14} color="rgba(148,163,184,.95)" />
                        </View>
                      );
                    })}
                  </View>

                  <View style={[styles.appFooter, { borderTopColor: colors.surfaceBorder }]}>
                    <View style={styles.appChips}>
                      <View
                        style={[
                          styles.appChip,
                          {
                            backgroundColor: colors.chipBg,
                            borderColor: colors.surfaceBorder,
                            marginRight: 8
                          }
                        ]}
                      >
                        {statusInfo.icon ? (
                          <Ionicons
                            name={statusInfo.icon}
                            size={14}
                            color={statusInfo.tint || colors.text}
                            style={styles.appChipIcon}
                          />
                        ) : null}
                        <Text style={[styles.appChipText, { color: colors.text }]}>
                          {status?.key || app.status}
                        </Text>
                      </View>
                      <View
                        style={[
                          styles.appChip,
                          {
                            backgroundColor: colors.chipBg,
                            borderColor: colors.surfaceBorder
                          }
                        ]}
                      >
                        <Text style={[styles.appChipText, { color: colors.text }]}>{app.platform}</Text>
                      </View>
                    </View>
                  </View>
                </View>
              );
            })
          ) : (
            <View
              style={[
                styles.appEmpty,
                { backgroundColor: colors.chipBg, borderColor: colors.surfaceBorder }
              ]}
            >
              <Text style={[styles.appEmptyText, { color: colors.text }]}>No applications logged yet.</Text>
              <TouchableOpacity
                onPress={() => setShowForm(true)}
                style={[styles.appEmptyButton, { backgroundColor: colors.sky }]}
              >
                <Text style={styles.appEmptyButtonText}>Log application</Text>
              </TouchableOpacity>
            </View>
          )}
        </Panel>

        <Text style={styles.footerText}>
          Mobile build. Use "Log application" to open the form.
        </Text>
      </ScrollView>

      <AppFormModal
        visible={showForm}
        onClose={() => setShowForm(false)}
        onSubmit={(fields) => {
          if (addApplication(fields)) {
            setShowForm(false);
          }
        }}
        colors={colors}
        theme={eff}
        effects={activeEffects}
      />
    </SafeAreaView>
  );
}

